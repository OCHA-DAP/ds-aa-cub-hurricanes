
## Email Set Up Prep

### Test Plots

Under current configuration emails need some plots on blob to grab. Therefore this chap/notebook creates those plots using `TEST_STORM` variable (under the hood)

#### Test Map Plot

```{python}
%load_ext jupyter_black
%load_ext autoreload
%autoreload 2
```

```{python}
import sys

sys.path.append("..")

from src.email.plotting import (
    create_plot,
    update_plots,
    create_scatter_plot,
    create_map_plot,
    create_map_plot_figure,
)
from src.email.utils import (
    add_test_row_to_monitoring,
    TEST_FCAST_MONITOR_ID,
    TEST_OBSV_MONITOR_ID,
)
from src.monitoring import monitoring_utils
import pandas as pd
```



```{python}
# | eval: false

# this would be run 1x once the maps are perfect
print("Creating test MAP plots using premade functions...")

# Create map plot for test observation data
try:
    create_map_plot(TEST_OBSV_MONITOR_ID, fcast_obsv="obsv")
    print("‚úÖ Test observation map plot created successfully")
except Exception as e:
    print(f"‚ùå Error creating test observation map plot: {e}")
    import traceback

    traceback.print_exc()

# Create map plot for test forecast data
try:
    create_map_plot(TEST_FCAST_MONITOR_ID, fcast_obsv="fcast")
    print("‚úÖ Test forecast map plot created successfully")
except Exception as e:
    print(f"‚ùå Error creating test forecast map plot: {e}")
    import traceback

    traceback.print_exc()
```

#### Scatter Plots (On Hold)

Note: Scatter plots are temporarily on hold because they require a stats file (`stats_230km.csv`) that needs to be generated by a colleague first.

## Preview Emails:

Now that the plots have been made we can preview how the emails will look.

```{python}

from src.email.preview import preview_info_email

print("üéØ Generating HTML email previews with test data...")

# Generate forecast email preview with test data
print("\\nüìß Creating FORECAST email preview with test data:")
preview_info_email(
    TEST_FCAST_MONITOR_ID, "fcast", save_to_file=True, with_tests=True
)

print("\\nüìß Creating OBSERVATION email preview with test data:")
preview_info_email(
    TEST_OBSV_MONITOR_ID, "obsv", save_to_file=True, with_tests=True
)

print("\\n‚úÖ HTML preview files have been created!")
print("\\nüìÇ Look for files named:")
print("   - email_preview_TEST_FCAST_MONITOR_ID_fcast_info.html")
print("   - email_preview_TEST_OBSV_MONITOR_ID_obsv_info.html")
print(
    "\\nüåê Open these files in your browser to see how the emails will look!"
)

```

# Create a map plot using a real monitor_id
```{python}
# Let's create a map plot using a real monitor_id from the actual data
from src.email.utils import load_monitoring_data

# Load real monitoring data to get a valid monitor_id
print("üìä Loading real monitoring data to find a valid monitor_id...")
df_fcast = load_monitoring_data("fcast", with_tests=False)

# Get a recent monitor_id
real_monitor_id = df_fcast["monitor_id"].iloc[0]
print(f"üéØ Using real monitor_id: {real_monitor_id}")

# Create map plot for this real monitor_id

m1 = create_map_plot_figure(real_monitor_id, fcast_obsv="fcast")

m1
```

## Set email_record.csv

```{python}
from src.email import update_emails, utils
```
```{python}
# | eval: false

import traceback
import os

import pandas as pd
import pytz

from src.monitoring import monitoring_utils

from src.utils import blob
from src.constants import *
from src.email import plotting
```

```{python, tc1}
# | eval: false

df_monitoring = monitoring_utils.load_existing_monitoring_points("fcast")
```

```{python, tc2}
#| eval: false

df_monitoring.iloc[-20:]
```

```{python}
update_emails.update_fcast_info_emails(verbose=True)
```

```python
update_emails.update_obsv_info_emails()
```

```python
MIN_EMAIL_DISTANCE = 1000
```

```python
df_existing_email_record = utils.load_email_record()
df_existing_email_record
```

```python
MONITOR_ID_TO_DROP = "al042024_fcast_2024-08-08T15:00:00"
```

```python
df_existing_email_record = df_existing_email_record[
    df_existing_email_record["monitor_id"] != MONITOR_ID_TO_DROP
]
df_existing_email_record
```

```python
blob_name = f"{blob.PROJECT_PREFIX}/email/email_record.csv"
blob.upload_csv_to_blob(blob_name, df_existing_email_record)
```

```python

```
